# TODO
# reduce publishes - delta + udateintervall

substitutions:

  external_components_source: github://KinDR007/VictronMPPT-ESPHOME@main

  board: nodemcuv2                    # esp32dev / az-delivery-devkit-v4 / esp32cam / esp32doit-devkit-v1                          esp32doit-devkit-v1 = 30pin NodeMCU | esp32dev/az-delivery-devkit-v4 = 38pin NodeMCU V3
  name: victron-smartshunt            # jk-bms1         #unique node-name. lowercase characters, digits and hyphens
  mqtt_id: SMARTSHUNT                 # JK_BMS1
  prefix: PV                          # PV/Batteries    #the path where the device should appear - e.g. 
  subtopic: SmartShunt                # JK_BMS1         #the name which the device shows up in the path e.g.  --> PV/Batteries/JK_BMS1/.....
  ip: 192.168.1.150
  device_description: "Monitor a Victron SmartShunt via UART/TTL"
  sensor_force_update_time: 60s
  victron_throttle: '1'

#web_server:
 # port: 80
 # log: false

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip}                                                  # Set this to the IP of the ESP
    gateway: !secret gateway                                          # Set this to the IP address of the router. Often ends with .1
    subnet: !secret subnet                                            # The subnet of the network. 255.255.255.0 works for most home networks.
    dns1: !secret dns1                                                # Set this to the IP address of the router. same as gateway.
  reboot_timeout: 5min

  ap:                                                                 # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: "${mqtt_id} Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

ota:
  password: !secret ota_password

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: ${mqtt_id}
  client_id: ${mqtt_id}
  topic_prefix: ${prefix}/${subtopic}
  discovery: false
  log_topic: ${prefix}/${subtopic}/99_Info/00_Debug/00_Payload
  birth_message:
    topic: ${prefix}/${subtopic}/99_Info/07_MQTT_Connection
    payload: 1
  will_message:
    topic: ${prefix}/${subtopic}/99_Info/07_MQTT_Connection
    payload: 0
  shutdown_message:
    topic: ${prefix}/${subtopic}/99_Info/07_MQTT_Connection
    payload: -1
  keepalive: 15s

debug:
  update_interval: 5s

esphome:
  name: ${name}
  comment: ${device_description}
  on_boot:
    priority: -100
    then:
      - mqtt.publish:                                                       # create command topics for ESP
          topic: ${prefix}/${subtopic}/97_Buttons/99_ESP_restart
          payload: "PRESS "

esp8266:
  board: ${board}

external_components:
  - source: ${external_components_source}
    refresh: 0s

logger:
  level: WARN
  #baud_rate: 0
  #esp8266_store_log_strings_in_flash: false

uart:
  id: uart_0
  tx_pin: D8  # Not connected! The communication is read-only
  rx_pin: D7  # Connect this this GPIO and GND to the MPPT charger
  baud_rate: 19200
  rx_buffer_size: 256

victron:
  uart_id: uart_0
  id: victron0
  throttle: ${victron_throttle}s

sensor:
  - platform: victron
    victron_id: victron0

    battery_voltage:
      name: "${name} battery voltage"
      accuracy_decimals: 3
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.005
      state_topic: ${prefix}/${subtopic}/01_Battery/01_Voltage
      on_raw_value:
        then:
          - script.execute: uart_heartbeat

    min_battery_voltage:
      name: "${name} min battery voltage"
      accuracy_decimals: 3
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.001
      state_topic: ${prefix}/${subtopic}/01_Battery/01_Voltage/02_min

    max_battery_voltage:
      name: "${name} max battery voltage"
      accuracy_decimals: 3
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.001
      state_topic: ${prefix}/${subtopic}/01_Battery/01_Voltage/01_max

    state_of_charge:
      name: "${name} state of charge"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/01_Battery/04_SoC

    battery_current:
      name: "${name} battery current"
      accuracy_decimals: 2
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.01
      state_topic: ${prefix}/${subtopic}/01_Battery/03_Current

    instantaneous_power:
      name: "${name} instantaneous power"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/01_Battery/02_Power

    consumed_amp_hours:
      name: "${name} consumed amp hours"
      accuracy_decimals: 1
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.1
      state_topic: ${prefix}/${subtopic}/01_Battery/05_Consumed_Ah

    time_to_go:
      name: "${name} time to go"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/10_History/00_Minutes_remaining


    last_full_charge:
      name: "${name} last full charge"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/10_History/01_Minutes_since_last_full_Charge

    depth_of_the_last_discharge:
      name: "${name} depth of the last discharge"
      accuracy_decimals: 1
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.1
      state_topic: ${prefix}/${subtopic}/10_History/03_Discharged_Ah_last

    depth_of_the_average_discharge:
      name: "${name} depth of the average discharge"
      accuracy_decimals: 1
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.1
      state_topic: ${prefix}/${subtopic}/10_History/04_Discharged_Ah_average

    depth_of_the_deepest_discharge:
      name: "${name} depth of the deepest discharge"
      accuracy_decimals: 1
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.1
      state_topic: ${prefix}/${subtopic}/10_History/05_Discharged_Ah_max

    cumulative_amp_hours_drawn:
      name: "${name} cumulative amp hours drawn"
      accuracy_decimals: 1
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.1
      state_topic: ${prefix}/${subtopic}/10_History/06_Discharged_Ah_total

    number_of_full_discharges:
      name: "${name} number of full discharges"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/10_History/08_full_Discharges_count

    number_of_automatic_synchronizations:
      name: "${name} number of automatic synchronizations"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/10_History/10_Synchronisation_count


    amount_of_discharged_energy:
      name: "${name} amount of discharged energy"
      accuracy_decimals: 1
      filters:
        - multiply: 0.001
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.1
      state_topic: ${prefix}/${subtopic}/07_Energy/02_Discharged_kWh

    amount_of_charged_energy:
      name: "${name} amount of charged energy"
      accuracy_decimals: 1
      filters:
        - multiply: 0.001
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 0.1
      state_topic: ${prefix}/${subtopic}/07_Energy/01_Charged_kWh

    number_of_charge_cycles:
      name: "${name} number of charge cycles"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/01_Battery/07_Cycle_count

    number_of_low_main_voltage_alarms:
      name: "${name} number of low main voltage alarms"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/99_Info/03_Alert/02_low_voltage_alarm_count

    number_of_high_main_voltage_alarms:
      name: "${name} number of high main voltage alarms"
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${sensor_force_update_time}
          - delta: 1
      state_topic: ${prefix}/${subtopic}/99_Info/03_Alert/01_high_voltage_alarm_count

 # ESP Uptime sensor
  - platform: uptime
    name: "9904 ESP Uptime (s)"
    id: uptime_sensor
    update_interval: 10s
    state_topic: ${prefix}/${subtopic}/99_Info/04_ESP_Uptime/seconds
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

 # WiFi Signal db sensor
  - platform: wifi_signal
    name: "9903 ESP WiFi Signal dBm"
    id: wifi_signal_db
    update_interval: 10s
    state_topic: ${prefix}/${subtopic}/99_Info/03_WiFi_Signal/db

 # WiFi Signal % sensor
  - platform: copy
    source_id: wifi_signal_db
    name: "9903 ESP WiFi Signal %"
    filters:
    - delta: 5
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    state_topic: ${prefix}/${subtopic}/99_Info/03_WiFi_Signal

 # ESP debug sensor
  - platform: debug
    free:
      name: "990001 free Heap"
      filters:
        - multiply: 0.001024
        #- delta: 5
      accuracy_decimals: 3
      unit_of_measurement: "kB"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/01_free_Heap
    block:
      name: "990002 Largest contiuous free RAM Block"
      filters:
        - multiply: 0.001024
        - delta: 50
      accuracy_decimals: 3
      unit_of_measurement: "kB"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/02_Largest_free_Block
    loop_time:
      name: "990004 Loop Time"
      filters:
        - delta: 5
      unit_of_measurement: "ms"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/04_Loop_Time

 # UART Connection Status
  - platform: template
    id: uart_status_no
    name: "0500 UART Connection status No"
    accuracy_decimals: 0
    state_topic: ${prefix}/${subtopic}/99_Info/01_UART_Connection/no

   #unused
    #dc_monitor_mode_id:
    #  name: "${name} dc monitor mode id"
    #  state_topic: ${prefix}/${subtopic}/new/dc_monitor_mode_id
    #number_of_low_auxiliary_voltage_alarms:
    #  name: "${name} number of low auxiliary voltage alarms"

    #number_of_high_auxiliary_voltage_alarms:
    #  name: "${name} number of high auxiliary voltage alarms"

    #min_auxiliary_battery_voltage:
    #  name: "${name} min auxiliary battery voltage"

    #max_auxiliary_battery_voltage:
    #  name: "${name} max auxiliary battery voltage"
    #battery_temperature:
    #  name: "${name} battery temperature"
    #auxiliary_battery_voltage:
    #  name: "${name} auxiliary battery voltage"

    #midpoint_voltage_of_the_battery_bank:
    #  name: "${name} midpoint voltage of the battery bank"

    #midpoint_deviation_of_the_battery_bank:
    #  name: "${name} midpoint deviation of the battery bank"

text_sensor:
  - platform: victron
    victron_id: victron0
    alarm_condition_active:
      name: "${name} alarm condition active"
      state_topic: ${prefix}/${subtopic}/99_Info/03_Alert
    alarm_reason:
      name: "${name} alarm reason"
      state_topic: ${prefix}/${subtopic}/99_Info/03_Alert/00_Alert_reason
    firmware_version:
      name: "${name} firmware version"
      state_topic: ${prefix}/${subtopic}/99_Info/99_Device_firmware

    #model_description:
    #  name: "${name} model description"
    #  state_topic: ${prefix}/${subtopic}/new/model_description
    #device_type:
    #  name: "${name} device type"
    #  state_topic: ${prefix}/${subtopic}/new/device_type
    #serial_number:
    #  name: "${name} serial number"
    #  state_topic: ${prefix}/${subtopic}/new/serial_number
    #dc_monitor_mode:
    #  name: "${name} dc monitor mode"
    #  state_topic: ${prefix}/${subtopic}/new/dc_monitor_mode

 # Wifi text_sensor
  - platform: wifi_info
    ip_address:
      name: "9909 ESP IP Address"
      state_topic: ${prefix}/${subtopic}/99_Info/09_IP_Address
      update_interval: 300s

 # ESP Uptime text_sensor
  - platform: template
    name: "9904 ESP Uptime"
    id: uptime_human
    state_topic: ${prefix}/${subtopic}/99_Info/04_ESP_Uptime

 # DEBUG text_sensor
  - platform: debug
    device:
      name: "990005 Device Info"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/05_Device_Info
    reset_reason:
      name: "990006 Reset Reason"
      state_topic: ${prefix}/${subtopic}/99_Info/00_Debug/06_Reset_Reason

binary_sensor:
 # UART Connection Status 
  - platform: template
    name: "0500 UART Connection status"
    id: uart_status
    state_topic: ${prefix}/${subtopic}/99_Info/01_UART_Connection

button:
 # ESP restart button
  - platform: restart
    name: "9799 restart ESP"
    id: "restart_ESP"
    state_topic: ${prefix}/${subtopic}/97_Buttons/99_ESP_restart
    command_topic: ${prefix}/${subtopic}/97_Buttons/99_ESP_restart

script:
  - id: uart_heartbeat
    mode: restart
    then:
      - lambda: id(uart_status).publish_state(true);
      - lambda: id(uart_status_no).publish_state(1);
      - delay: !lambda |-                                     # calculate 4 * ${victron_throttle} * 1000 (unit for lambda must be in ms)
                return (10 * ${victron_throttle} * 1000);
      - lambda: id(uart_status).publish_state(false);
      - lambda: id(uart_status_no).publish_state(0);
